from Crypto.Util.number import getPrime, isPrime, long_to_bytes

n = 10565111742779621369865244442986012561396692673454910362609046015925986143478477636135123823568238799221073736640238782018226118947815621060733362956285282617024125831451239252829020159808921127494956720795643829784184023834660903398677823590748068165468077222708643934113813031996923649853965683973247210221430589980477793099978524923475037870799
e = 65537
ct = 9953835612864168958493881125012168733523409382351354854632430461608351532481509658102591265243759698363517384998445400450605072899351246319609602750009384658165461577933077010367041079697256427873608015844538854795998933587082438951814536702595878846142644494615211280580559681850168231137824062612646010487818329823551577905707110039178482377985

l, r = 2, 10**200
p = -1

while l <= r:
    mid = (l+r)//2
    if mid*(mid+6)*(mid+12) == n:
        p = mid
        break
    if mid*(mid+6)*(mid+12) < n:
        l = mid+1
    else:
        r = mid-1

assert p != -1
print(f"p: {p}")
mod = (p-1)*(p+5)*(p+11)
d = pow(e, -1, mod)

flag = long_to_bytes(pow(ct, d, n))
print(f"flag: {flag}")